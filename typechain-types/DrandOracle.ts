/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DrandOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "drandEntries"
      | "getDrand"
      | "hasUpdatePeriodExpired"
      | "isDrandAvailable"
      | "postDrandRandomness"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DrandUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "drandEntries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDrand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUpdatePeriodExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDrandAvailable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postDrandRandomness",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "drandEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDrand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasUpdatePeriodExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDrandAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postDrandRandomness",
    data: BytesLike
  ): Result;
}

export namespace DrandUpdatedEvent {
  export type InputTuple = [T: BigNumberish, randomness: BytesLike];
  export type OutputTuple = [T: bigint, randomness: string];
  export interface OutputObject {
    T: bigint;
    randomness: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DrandOracle extends BaseContract {
  connect(runner?: ContractRunner | null): DrandOracle;
  waitForDeployment(): Promise<this>;

  interface: DrandOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  drandEntries: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        randomness: string;
        timestamp: bigint;
        filled: boolean;
      }
    ],
    "view"
  >;

  getDrand: TypedContractMethod<[T: BigNumberish], [string], "view">;

  hasUpdatePeriodExpired: TypedContractMethod<
    [T: BigNumberish],
    [boolean],
    "view"
  >;

  isDrandAvailable: TypedContractMethod<[T: BigNumberish], [boolean], "view">;

  postDrandRandomness: TypedContractMethod<
    [T: BigNumberish, randomness: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "drandEntries"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        randomness: string;
        timestamp: bigint;
        filled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDrand"
  ): TypedContractMethod<[T: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "hasUpdatePeriodExpired"
  ): TypedContractMethod<[T: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDrandAvailable"
  ): TypedContractMethod<[T: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "postDrandRandomness"
  ): TypedContractMethod<
    [T: BigNumberish, randomness: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DrandUpdated"
  ): TypedContractEvent<
    DrandUpdatedEvent.InputTuple,
    DrandUpdatedEvent.OutputTuple,
    DrandUpdatedEvent.OutputObject
  >;

  filters: {
    "DrandUpdated(uint256,bytes32)": TypedContractEvent<
      DrandUpdatedEvent.InputTuple,
      DrandUpdatedEvent.OutputTuple,
      DrandUpdatedEvent.OutputObject
    >;
    DrandUpdated: TypedContractEvent<
      DrandUpdatedEvent.InputTuple,
      DrandUpdatedEvent.OutputTuple,
      DrandUpdatedEvent.OutputObject
    >;
  };
}
